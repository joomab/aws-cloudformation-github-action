name: Dev-Pipeline

on: 
  push:
    branches: [ dev ]
  workflow_dispatch:

env:
  PIPELINE_USER_ACCESS_KEY_ID: ${{ secrets.DEV_ACCESS_KEY }}
  PIPELINE_USER_SECRET_ACCESS_KEY: ${{ secrets.DEV_SECRET_ACCESS_KEY }}
  SAM_TEMPLATE: sam-app/template.yaml
  ENV_STACK_NAME: ${{ vars.DEV_STACK_NAME }}
  ENV_PIPELINE_EXECUTION_ROLE: ${{ secrets.DEV_PIPELINE_EXECUTION_ROLE }}
  ENV_CLOUDFORMATION_EXECUTION_ROLE: ${{ secrets.DEV_CLOUDFORMATION_EXECUTION_ROLE }}
  ENV_ARTIFACTS_BUCKET: ${{ secrets.DEV_ARTIFACTS_BUCKET }}
  ENV_REGION: us-east-1
  STACK_PARAMETERS: ${{ vars.DEV_PARAMETERS }}

jobs:
  build-and-package:
    # if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - name: Set up Python
        # This is the version of the action for setting up Python, not the Python version.
        uses: actions/setup-python@v4
        with:
          # Semantic version range syntax or exact version of a Python version
          python-version: '3.11'
      - name: Build resources
        run: sam build --template ${SAM_TEMPLATE}

      - name: Assume the env pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ENV_REGION }}
          role-to-assume: ${{ env.ENV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: env-packaging
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Upload artifacts to env artifact buckets
        run: |
          sam package \
            --s3-bucket ${ENV_ARTIFACTS_BUCKET} \
            --region ${ENV_REGION} \
            --output-template-file packaged-env.yaml

      - uses: actions/upload-artifact@v3
        with:
          name: packaged-env.yaml
          path: packaged-env.yaml

  deploy-env:
    # if: github.ref == 'refs/heads/master'
    needs: [build-and-package]
    runs-on: ubuntu-latest
    # Configure GitHub Action Environment to have a manual approval step before deployment to production
    # https://docs.github.com/en/actions/reference/environments
    # environment: <configured-environment>
    steps:
      - uses: actions/checkout@v3
      - uses: aws-actions/setup-sam@v2
        with:
          use-installer: true
      - uses: actions/download-artifact@v3
        with:
          name: packaged-env.yaml

      - name: Assume the env pipeline user role
        uses: aws-actions/configure-aws-credentials@v1-node16
        with:
          aws-access-key-id: ${{ env.PIPELINE_USER_ACCESS_KEY_ID }}
          aws-secret-access-key: ${{ env.PIPELINE_USER_SECRET_ACCESS_KEY }}
          aws-region: ${{ env.ENV_REGION }}
          role-to-assume: ${{ env.ENV_PIPELINE_EXECUTION_ROLE }}
          role-session-name: env-deployment
          role-duration-seconds: 3600
          role-skip-session-tagging: true

      - name: Deploy to env account
        run: |
          echo $STACK_PARAMETERS > parameters.json
          # result=$(python converter.py)

          # echo $SAM_PARAMETERS
          # echo $result
          sam deploy --stack-name ${ENV_STACK_NAME} \
            --template packaged-env.yaml \
            --capabilities CAPABILITY_IAM \
            --region ${ENV_REGION} \
            --s3-bucket ${ENV_ARTIFACTS_BUCKET} \
            --no-fail-on-empty-changeset \
            --role-arn ${ENV_CLOUDFORMATION_EXECUTION_ROLE} \
            --parameter-overrides "$(jq -j 'to_entries[] | "\(.key)='\\\"'\(.value)'\\\"''\ '"' parameters.json)"